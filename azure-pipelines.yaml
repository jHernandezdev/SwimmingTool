# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  branches:
   include:     
     - main
  paths:
    include:
    - src

variables:
  buildConfiguration: 'Release'

stages:
  - stage: BuildAndTest
    displayName: Build and test in a container
    jobs:
      - job: 
        pool:
          vmImage: ubuntu-latest          
        steps:          
          - task: SnykSecurityScan@1
            inputs:
              serviceConnectionEndpoint: 'Snyc'
              testType: 'app'
              monitorWhen: 'always'
              failOnIssues: true
              projectName: 'jHernandezdev/SwimmingTool'
          - task: DotNetCoreCLI@2
            displayName: Restauracion de dependencias
            inputs:
              command: restore
              projects: src/**/*csproj
          - task: DotNetCoreCLI@2
            displayName: Compilacion de los proyectos
            inputs:
              command: build
              projects: src/**/*csproj
              arguments: '--configuration $(BuildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: Test
            inputs:
              command: test
              projects: tests/**/*.csproj
              arguments: '--configuration $(BuildConfiguration) --collect "Code coverage"'
            
          - task: DotNetCoreCLI@2
            displayName: Publish
            inputs:
              command: publish
              publishWebProjects: False
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/SwimmingTool_$(Build.BuildNumber)'
              zipAfterPublish: True

          - task: PublishTestResults@2
            displayName: Publicacion de resultados de test
            inputs:
              buildConfiguration: $(BuildConfiguration)
              testResultsFormat: VSTest
              testResultsFiles: $(Agent.TempDirectory)/*.trx

          - task: PublishCodeCoverageResults@1 
            displayName: Publicar resultados de covertura
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(Agent.TempDirectory)/*.coverage

          - task: CopyFiles@2
            displayName: 'Copy build files'
            inputs:              
              TargetFolder: '$(build.artifactstagingdirectory)/build'
              CleanTargetFolder: true
              OverWrite: true
              
          - task: PublishBuildArtifacts@1
            displayName: Generando artefacto
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/SwimmingTool_$(Build.BuildNumber)'
              ArtifactName: 'SwimmingTool_LatestBuild'
              publishLocation: 'Container'

          - script: |
              docker-compose up --force-recreate --build --detach
            workingDirectory: .
            displayName: Lanzar Docker Compose

          - task: Bash@3
            displayName: Verificar Docker container
            inputs:
              targetType: inline
              script: |
                sleep 30
                testCondition=$(docker inspect --format="{{.State.Running}}" catalog_api)
                if [ "$testCondition" == "false" ]; then
                  echo "The container is not running" >&2
                  exit 1;
                else
                  echo "The container is running" >&2
                  exit 0
                fi
          - script: |
              docker-compose -f docker-compose.yml down
            displayName: Parar Docker compose
            workingDirectory: .
