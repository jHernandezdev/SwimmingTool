# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  branches:
   include:     
     - main
  paths:
    include:
    - src

variables:
  buildConfiguration: 'Release'

stages:
  - stage: CI
    displayName: Build and test in a container
    jobs:
      - job: BuildAndTest
        pool:
          vmImage: ubuntu-latest          
        steps:                         
          - task: DotNetCoreCLI@2
            displayName: Restauracion de dependencias
            inputs:
              command: restore
              projects: src/**/*csproj
          - task: DotNetCoreCLI@2
            displayName: Compilacion de los proyectos
            inputs:
              command: build
              projects: src/**/*csproj
              arguments: '--configuration $(BuildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: Test
            inputs:
              command: test
              projects: tests/**/*.csproj
              arguments: '--configuration $(BuildConfiguration) --collect "Code coverage"'
                   
          - task: DotNetCoreCLI@2
            displayName: Publish
            inputs:
              command: publish
              publishWebProjects: False
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/SwimmingTool_$(Build.BuildNumber)'
              zipAfterPublish: True

          - task: PublishTestResults@2
            displayName: Publicacion de resultados de test
            inputs:
              buildConfiguration: $(BuildConfiguration)
              testResultsFormat: VSTest
              testResultsFiles: $(Agent.TempDirectory)/*.trx

          - task: PublishCodeCoverageResults@1 
            displayName: Publicar resultados de covertura
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(Agent.TempDirectory)/*.coverage

          - task: CopyFiles@2
            displayName: 'Copy build files'
            inputs:              
              TargetFolder: '$(build.artifactstagingdirectory)/build'
              CleanTargetFolder: true
              OverWrite: true
              
          - task: PublishBuildArtifacts@1
            displayName: Generando artefacto
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/SwimmingTool_$(Build.BuildNumber)'
              ArtifactName: 'SwimmingTool_LatestBuild'
              publishLocation: 'Container'

          - script: |
              docker-compose up --force-recreate --build --detach
            workingDirectory: .
            displayName: Lanzar Docker Compose

          - task: Bash@3
            displayName: Verificar Docker container
            inputs:
              targetType: inline
              script: |
                sleep 30
                testCondition=$(docker inspect --format="{{.State.Running}}" catalog_api)
                if [ "$testCondition" == "false" ]; then
                  echo "The container is not running" >&2
                  exit 1;
                else
                  echo "The container is running" >&2
                  exit 0
                fi
          - script: |
              docker-compose -f docker-compose.yml down
            displayName: Parar Docker compose
            workingDirectory: .
  
  - stage: CD
    jobs:
      - job: Docker
        displayName: Build and push container
        pool:
          vmImage: ubuntu-latest        
        steps:
          - task: Docker@2
            displayName: Build image
            inputs:
              command: build
              containerRegistry: 'jmhh-acr'
              repository: 'swimmingtool'              
              Dockerfile: 'containers/api/Dockerfile'
              buildContext: '.'
              tags: |
                $(Build.BuildId)
                latest
          - task: Docker@2
            displayName: Push image
            inputs:
              containerRegistry: 'jmhh-acr'
              repository: 'swimmingtool'
              command: push
              tags: |
                $(Build.BuildId)
                latest

      - deployment: K8S_Desarrollo
        dependsOn: Docker
        displayName: Deploy to K8S develop cluster
        #condition: ne(variables['Build.SourceBranchName'], 'main')
        pool:
          vmImage: 'ubuntu-latest'      
        variables:
          - group: swimmingtool_desarrollo
          - group: swimmingtool_desarrollo_kv
        environment: Desarrollo_AKS.development
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: Kubernetes@1
                  displayName: Creacion del ConfigMap
                  inputs:
                    namespace: development
                    forceUpdateConfigMap: true
                    configMapName: variablesentornoswimmingtool
                    configMapArguments: 
                      --from-literal=conexionrepositorio="$(CONNECTIONSTRINGSWIMMINGTOOL)" 
                      --from-literal=conexionrabbit="$(CONNECTIONRABBITMQ)" 
                      --from-literal=applicationinsights_connectionstring="$(APPLICATIONINSIGHTSCONNECTIONSTRING)"
                      --from-literal=aspnetcoreenvironment="$(ASPNETCORE_ENVIRONMENT)"
                      
                - task: KubernetesManifest@0
                  displayName: Creacion del deployment y service
                  inputs:
                    action: deploy
                    manifests: containers/api/deployment.yml
                    containers: jmhhregistry.azurecr.io/swimmingtool:$(Build.BuildId)

      #- deployment: K8S_Produccion
      # displayName: Deploy to K8S production cluster
        #condition: eq(variables['Build.SourceBranchName'], 'main')
        #pool:
        #    vmImage: 'ubuntu-latest'
        #environment: Produccion.default
        #variables:
        #- group: operadores_produccion
        #strategy:
        #  runOnce:
        #    deploy:
        #      steps:
        #        - checkout: self
        #        - task: Kubernetes@1
        #          displayName: Creacion del ConfigMap
        #          inputs:                  
        #            forceUpdateConfigMap: true
        #            configMapName: variablesentornooperadores
        #            configMapArguments: --from-literal=conexionrepositorio="$(CONNECTIONSTRINGOPERADORES)" --from-literal=conexionrabbit="$(CONNECTIONRABBITMQ)"

                #- task: KubernetesManifest@0
                # displayName: Creacion del deployment y service
                  #inputs:
                  # action: deploy
                    #manifests: ./operadores.yml
                    #containers: drnacr.azurecr.io/operadores:$(Build.BuildId)